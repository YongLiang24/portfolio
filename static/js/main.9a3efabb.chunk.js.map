{"version":3,"sources":["components/NavBar.js","components/HomeCard.js","App.js","serviceWorker.js","index.js"],"names":["NavBar","props","react_default","a","createElement","Menu","fixed","inverted","id","borderless","widths","Item","as","onClick","handleMenuItem","HomeCard","Card","centered","fluid","Content","textAlign","Header","Meta","Description","className","Popup","trigger","Label","circular","color","content","href","target","rel","Icon","name","size","App","ev","console","log","components_NavBar","this","components_HomeCard","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"gSAWeA,EARA,SAACC,GACZ,OACEC,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAMC,MAAM,MAAMC,UAAQ,EAACC,GAAG,gBAAgBC,YAAU,EAACC,OAAO,KAC9DR,EAAAC,EAAAC,cAACC,EAAA,EAAKM,KAAN,CAAYC,GAAG,IAAIC,QAASZ,EAAMa,eAAgBN,GAAG,QAArD,QACAN,EAAAC,EAAAC,cAACC,EAAA,EAAKM,KAAN,CAAWC,GAAG,IAAIC,QAASZ,EAAMa,eAAgBN,GAAG,WAApD,YACAN,EAAAC,EAAAC,cAACC,EAAA,EAAKM,KAAN,CAAWC,GAAG,IAAIC,QAASZ,EAAMa,eAAgBN,GAAG,SAApD,8CCYOO,EAlBC,SAACd,GACf,OACAC,EAAAC,EAAAC,cAACY,EAAA,EAAD,CAAOC,UAAQ,EAACC,OAAK,EAACV,GAAG,aACvBN,EAAAC,EAAAC,cAACY,EAAA,EAAKG,QAAN,CAAcC,UAAU,UAASlB,EAAAC,EAAAC,cAAA,WAC/BF,EAAAC,EAAAC,cAACY,EAAA,EAAKK,OAAN,CAAaD,UAAU,UAAvB,cACAlB,EAAAC,EAAAC,cAACY,EAAA,EAAKM,KAAN,CAAWF,UAAU,UAArB,qBACAlB,EAAAC,EAAAC,cAACY,EAAA,EAAKO,YAAN,CAAkBH,UAAU,UAC1BlB,EAAAC,EAAAC,cAAA,KAAGoB,UAAU,oBAAb,kHADF,IACqJtB,EAAAC,EAAAC,cAAA,KAAGoB,UAAU,oBAAb,4EAEnJtB,EAAAC,EAAAC,cAACqB,EAAA,EAAD,CAAOC,QAASxB,EAAAC,EAAAC,cAACuB,EAAA,EAAD,CAAOC,UAAQ,EAACC,MAAM,OAAOjB,GAAG,IAAIC,QAASZ,EAAMa,eAAgBN,GAAG,eAAtE,YAAsGsB,QAAQ,wBAC9H5B,EAAAC,EAAAC,cAACqB,EAAA,EAAD,CAAOC,QAASxB,EAAAC,EAAAC,cAACuB,EAAA,EAAD,CAAOC,UAAQ,EAACC,MAAM,OAAOjB,GAAG,IAAIC,QAASZ,EAAMa,eAAgBN,GAAG,aAAtE,SAAiGsB,QAAQ,qBACzH5B,EAAAC,EAAAC,cAACqB,EAAA,EAAD,CAAOC,QAASxB,EAAAC,EAAAC,cAACuB,EAAA,EAAD,CAAOC,UAAQ,EAACC,MAAM,OAAOjB,GAAG,IAAImB,KAAK,wCAAwCC,OAAO,SAAUC,IAAI,uBAAtG,UAA4IH,QAAQ,iCACpK5B,EAAAC,EAAAC,cAACqB,EAAA,EAAD,CAAOC,QAASxB,EAAAC,EAAAC,cAAA,KAAG2B,KAAK,iCAAiCC,OAAO,SAASC,IAAI,uBAAsB/B,EAAAC,EAAAC,cAAC8B,EAAA,EAAD,CAAMC,KAAK,SAASC,KAAK,SAAaN,QAAQ,iCACjJ5B,EAAAC,EAAAC,cAACqB,EAAA,EAAD,CAAOC,QAASxB,EAAAC,EAAAC,cAAA,KAAG2B,KAAK,2CAA2CC,OAAO,SAASC,IAAI,uBAAsB/B,EAAAC,EAAAC,cAAC8B,EAAA,EAAD,CAAMC,KAAK,WAAWC,KAAK,SAAaN,QAAQ,uCCKtJO,6MAbbvB,eAAiB,SAACwB,GAChBC,QAAQC,IAAI,kBAAmBF,EAAGN,OAAOxB,6EAIzC,OACEN,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACqC,EAAD,CAAQ3B,eAAgB4B,KAAK5B,iBAAiBZ,EAAAC,EAAAC,cAAA,WAC9CF,EAAAC,EAAAC,cAACuC,EAAD,CAAU7B,eAAgB4B,KAAK5B,yBAVrB8B,IAAMC,WCOJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,kECXNC,IAASC,OAAOlD,EAAAC,EAAAC,cAACiD,EAAD,MAASC,SAASC,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.9a3efabb.chunk.js","sourcesContent":["import React from 'react';\nimport { Menu} from 'semantic-ui-react'\n\nconst NavBar = (props)=> {\n    return(\n      <Menu fixed='top' inverted id=\"nav_container\" borderless widths=\"4\">\n        <Menu.Item  as='a' onClick={props.handleMenuItem} id=\"home\">Home</Menu.Item>\n        <Menu.Item as='a' onClick={props.handleMenuItem} id=\"project\">Projects</Menu.Item>\n        <Menu.Item as='a' onClick={props.handleMenuItem} id=\"about\">About</Menu.Item>\n      </Menu>)\n}\nexport default NavBar;\n","import React from 'react';\nimport {Card, Image, Icon, Popup, Label} from 'semantic-ui-react'\nconst HomeCard =(props)=>{\n  return(\n  <Card  centered fluid id=\"main_card\">\n    <Card.Content textAlign=\"center\"><br/>\n      <Card.Header textAlign=\"center\">Yong Liang</Card.Header>\n      <Card.Meta textAlign=\"center\">Software Engineer</Card.Meta>\n      <Card.Description textAlign=\"center\">\n        <p className=\"home_description\"> - I'm a junior web developer in Seattle, a technology enthusiast who loves to write codes and build products.</p> <p className=\"home_description\">To learn more about me and my works, please select one of the following:</p>\n        {/*icon selections  */}\n        <Popup trigger={<Label circular color=\"blue\" as='a' onClick={props.handleMenuItem} id=\"projectIcon\">Projects</Label>} content=\"Visit projects page\"/>\n        <Popup trigger={<Label circular color=\"blue\" as='a' onClick={props.handleMenuItem} id=\"aboutIcon\">About</Label>} content=\"Visit about page\"/>\n        <Popup trigger={<Label circular color=\"blue\" as='a' href=\"https://yongliang24.github.io/resume/\" target=\"_blank\"  rel=\"noopener noreferrer\">Resume</Label>} content=\"Visit resume {External Link}\"/>\n        <Popup trigger={<a href=\"https://github.com/YongLiang24\" target=\"_blank\" rel=\"noopener noreferrer\"><Icon name='github' size=\"big\"/></a>} content=\"Visit github {External Link}\"/>\n        <Popup trigger={<a href=\"https://www.linkedin.com/in/yongliang24/\" target=\"_blank\" rel=\"noopener noreferrer\"><Icon name='linkedin' size=\"big\"/></a>} content=\"Visit linkedin {External Link}\"/>\n      </Card.Description>\n    </Card.Content>\n  </Card>)\n}\nexport default HomeCard;\n","import React from 'react';\nimport './App.css';\nimport NavBar from './components/NavBar';\nimport HomeCard from './components/HomeCard';\n\nclass App extends React.Component{\n\n  handleMenuItem = (ev)=>{\n    console.log(\"check menuitem:\", ev.target.id)\n  }\n\n  render(){\n    return (\n      <div>\n        <NavBar handleMenuItem={this.handleMenuItem}/><br/>\n        <HomeCard handleMenuItem={this.handleMenuItem}/>\n      </div>\n    )\n  }\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'semantic-ui-css/semantic.min.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}